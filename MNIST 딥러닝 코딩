import torch

# 입력 뉴런: 5개, 출력 뉴런: 3개
hello = torch.nn.Linear(5, 3)

# 임의의 입력 벡터 2개 만들기
data = torch.randn(2, 5)
print(data)

# 인공신경망에 입력하고 결과 출력 (2행 3열)
print(hello(data))

# 필요한 패키지 가져오기
from torchvision.datasets import MNIST
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
import torch.nn as nn
from torchsummary import summary


# 데이터 변환 방식 지정
rules = transforms.Compose([
    transforms.ToTensor(),
])

# 학습용 데이터 로더
train_loader = DataLoader(
    MNIST('mnist', train=True, download=True, transform=rules),
    batch_size=500, shuffle=True
)

# 평가용 데이터 로더
test_loader = DataLoader(
    MNIST('mnist', train=False, download=True, transform=rules),
    batch_size=500, shuffle=False
)

# 임의의 이미지 한 batch 가져오기
i = iter(train_loader)
images, labels = i.next()

print(images[0])
print(labels[0])

# 파이토치 DNN을 Sequential 모델로 구현
model = nn.Sequential(
    nn.Flatten(),
    nn.Linear(784, 128),
    nn.ReLU(),
    nn.Dropout(p=0.2),
    nn.Linear(128, 10),
    nn.Softmax(dim=1)
)

# 인공신경망 요약
print('\nDNN 요약')
summary(model, (1, 28, 28))

# 최적화 함수와 손실 함수 지정
optimizer = torch.optim.Adam(model.parameters(), lr = 0.01)
criterion = nn.CrossEntropyLoss()

# 인공신경망 학습
for epoch in range(5):
    for data in train_loader:
        inputs, labels = data # 각각 500개
        outputs = model(inputs) # 순방향 계산

        # print(inputs.shape)
        # print(outputs.shape)
        # print(labels.shape)

        # 손실값 - 1개 (평균 손실 1개의 값만 존재)
        loss = criterion(outputs, labels)

        # print(loss.shape)

        # 역전파 알고리즘으로 가중치 보정
        model.zero_grad()
        loss.backward()
        optimizer.step() # 보정치

    # 손실값 출력
    print('에포크: {}'.format(epoch),
          '손실: {:.3f}'.format(loss.item()))

# 인공신경망 평가
correct = 0
# 학습용 데이터를 한 배치씩 가져옴
for images, labels in test_loader:
     with torch.no_grad():
        pred = model(images) # 10개의 확률 500개

        # print(pred.shape)

        # softmax 활성화를 라벨로 전환
        pred = torch.argmax(pred, dim=1)

        # print(pred.shape)

        for i in range(500):
             if (pred[i] == labels[i]):
                 correct += 1

     print('정확도: ', correct / 10000)
